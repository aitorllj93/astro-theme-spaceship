---
import { convert as htmlToText } from "html-to-text";
import calculateReadingTime from "reading-time";

import { useI18n } from "@/i18n";
import type { DocumentContext } from "@/types";
import { formatDuration } from "@/helpers/formatDuration";

export type Props = {
  document?: DocumentContext;
};

const { document } = Astro.props;

const { t } = useI18n(Astro);

const text = htmlToText(document?.rendered?.html as string);

const readingTime = formatDuration(t)(calculateReadingTime(text).time);
// const words = text.split(" ").filter(t => t.length > 0).length.toString();
// const characters = text.length.toString();
---

{
  document?.rendered && (
    <footer class="footer">
      <p>{t("footer.readingTime", { readingTime })}</p>
      {/* <p>
      {t('footer.wordsCount', { words })}
    </p>
    <p>
      {t('footer.charactersCount', { characters })}
    </p> */}
    </footer>
  )
}
